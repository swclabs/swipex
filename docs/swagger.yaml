basePath: /
definitions:
  dtos.AccessoryDetail:
    properties:
      category:
        type: string
      image:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: string
      status:
        type: string
    type: object
  dtos.Address:
    properties:
      city:
        type: string
      district:
        type: string
      id:
        type: integer
      street:
        type: string
      ward:
        type: string
    required:
    - city
    - district
    - id
    - street
    - ward
    type: object
  dtos.Article:
    properties:
      cards:
        items:
          $ref: '#/definitions/dtos.CardInArticle'
        type: array
      headline:
        type: string
    required:
    - cards
    - headline
    type: object
  dtos.CardContent:
    properties:
      content:
        type: string
      src:
        type: string
    required:
    - content
    type: object
  dtos.CardInArticle:
    properties:
      category:
        type: string
      content:
        items:
          $ref: '#/definitions/dtos.CardContent'
        type: array
      src:
        type: string
      title:
        type: string
    required:
    - category
    - title
    type: object
  dtos.CartDTO:
    properties:
      inventory_id:
        type: integer
      quantity:
        type: integer
      spec_id:
        type: integer
    required:
    - inventory_id
    - quantity
    - spec_id
    type: object
  dtos.CartSchema:
    properties:
      amount:
        type: string
      category:
        type: string
      id:
        type: integer
      img:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  dtos.CartSlices:
    properties:
      products:
        items:
          $ref: '#/definitions/dtos.CartSchema'
        type: array
      user_id:
        type: integer
    type: object
  dtos.Comment:
    properties:
      content:
        items:
          type: string
        type: array
      dislike:
        type: integer
      id:
        description: Position string   `json:"position" validate:"required"`
        type: integer
      level:
        description: '0: parent, 1: child'
        type: integer
      like:
        type: integer
      parent_id:
        type: integer
      product_id:
        type: integer
      rating:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    required:
    - content
    - dislike
    - id
    - level
    - like
    - rating
    - username
    type: object
  dtos.CreateProduct:
    properties:
      id:
        type: integer
      msg:
        type: string
    type: object
  dtos.DeliveryAddress:
    properties:
      city:
        type: string
      district:
        type: string
      street:
        type: string
      user_id:
        type: integer
      ward:
        type: string
    required:
    - city
    - district
    - street
    - user_id
    - ward
    type: object
  dtos.DeliveryBody:
    properties:
      address_id:
        type: integer
      method:
        type: string
      note:
        type: string
      received_date:
        type: string
      sent_date:
        type: string
      status:
        type: string
      user_id:
        type: integer
    required:
    - address_id
    - method
    - status
    - user_id
    type: object
  dtos.DetailColor-dtos_DetailStorage:
    properties:
      img:
        description: Img of color Nature Titanium
        type: string
      name:
        description: Name Nature Titanium
        type: string
      product:
        description: Img of product Nature Titanium
        items:
          type: string
        type: array
      specs:
        items:
          $ref: '#/definitions/dtos.DetailStorage'
        type: array
    type: object
  dtos.DetailStorage:
    properties:
      RAM:
        description: Value 8GB
        type: string
      SSD:
        description: Value 128GB
        type: string
      price:
        description: Price 1.000.000 VND
        type: string
    type: object
  dtos.Error:
    properties:
      msg:
        type: string
    type: object
  dtos.InvDetail-dtos_Object:
    properties:
      available:
        type: string
      color:
        type: string
      color_img:
        type: string
      currency_code:
        type: string
      image:
        items:
          type: string
        type: array
      price:
        type: string
      product_id:
        type: string
      specs:
        items:
          $ref: '#/definitions/dtos.Object'
        type: array
      status:
        type: string
    required:
    - available
    - currency_code
    - price
    - product_id
    type: object
  dtos.InvStock-dtos_InvStorage:
    properties:
      header:
        $ref: '#/definitions/dtos.StockHeader'
      limit:
        type: integer
      page:
        type: integer
      stock:
        items:
          $ref: '#/definitions/dtos.Inventory-dtos_InvStorage'
        type: array
    type: object
  dtos.InvStorage:
    properties:
      id:
        type: integer
      ram:
        type: string
      ssd:
        type: string
    type: object
  dtos.InvUpdate:
    properties:
      available:
        type: string
      currency_code:
        type: string
      id:
        type: string
      price:
        type: string
      product_id:
        type: string
      status:
        type: string
    required:
    - id
    type: object
  dtos.Inventory-dtos_InvStorage:
    properties:
      available:
        type: string
      category:
        type: string
      color:
        type: string
      color_img:
        type: string
      currency_code:
        type: string
      id:
        type: integer
      image:
        items:
          type: string
        type: array
      price:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      specs:
        items:
          $ref: '#/definitions/dtos.InvStorage'
        type: array
      status:
        type: string
    required:
    - available
    - currency_code
    - price
    - product_id
    type: object
  dtos.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dtos.LoginResponse:
    properties:
      email:
        type: string
      success:
        type: boolean
      token:
        type: string
    required:
    - email
    - success
    - token
    type: object
  dtos.Message:
    properties:
      content:
        items:
          type: string
        type: array
      position:
        type: string
    required:
    - content
    - position
    type: object
  dtos.OK:
    properties:
      msg:
        type: string
    type: object
  dtos.Object:
    type: object
  dtos.OrderDTO:
    properties:
      delevery_id:
        type: integer
      product:
        items:
          properties:
            inventory_id:
              type: integer
            quantity:
              type: integer
            specs_id:
              type: integer
          required:
          - inventory_id
          - quantity
          type: object
        type: array
    required:
    - delevery_id
    - product
    type: object
  dtos.OrderSchema:
    properties:
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      status:
        type: string
      time:
        type: string
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
      uuid:
        type: string
    type: object
  dtos.ProductDetail-dtos_DetailStorage:
    properties:
      color:
        description: Color of product
        items:
          $ref: '#/definitions/dtos.DetailColor-dtos_DetailStorage'
        type: array
      display:
        description: Display Super AMOLED
        type: string
      image:
        description: Image of product
        items:
          type: string
        type: array
      name:
        description: Name of product
        type: string
      screen:
        description: Screen 6.1 inch
        type: string
    type: object
  dtos.ProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: string
      specs:
        $ref: '#/definitions/dtos.ProductSpecs'
      status:
        type: string
      supplier_id:
        type: integer
    required:
    - category_id
    - description
    - name
    - price
    - supplier_id
    type: object
  dtos.ProductResponse:
    properties:
      category:
        type: string
      created:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: string
      status:
        type: string
    type: object
  dtos.ProductSpecs:
    properties:
      display:
        type: string
      screen:
        type: string
    type: object
  dtos.ProductView:
    properties:
      category:
        type: string
      desc:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: string
      specs: {}
    type: object
  dtos.SignUpRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    type: object
  dtos.SignUpResponse:
    properties:
      msg:
        type: string
      success:
        type: boolean
    required:
    - msg
    - success
    type: object
  dtos.Slices-dtos_ProductResponse:
    properties:
      body:
        items:
          $ref: '#/definitions/dtos.ProductResponse'
        type: array
    type: object
  dtos.Slices-entity_Categories:
    properties:
      body:
        items:
          $ref: '#/definitions/entity.Categories'
        type: array
    type: object
  dtos.Slices-entity_Suppliers:
    properties:
      body:
        items:
          $ref: '#/definitions/entity.Suppliers'
        type: array
    type: object
  dtos.StockHeader:
    properties:
      active:
        type: integer
      all:
        type: integer
      archive:
        type: integer
      draft:
        type: integer
    type: object
  dtos.Supplier:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  dtos.UpdateCategories:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - name
    type: object
  dtos.UpdateProductInfo:
    properties:
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: string
      specs:
        $ref: '#/definitions/dtos.ProductSpecs'
      status:
        type: string
      supplier_id:
        type: integer
    required:
    - id
    type: object
  dtos.UploadArticle:
    properties:
      cards:
        items:
          $ref: '#/definitions/dtos.CardInArticle'
        type: array
      headline:
        type: string
      position:
        type: string
    required:
    - cards
    - headline
    - position
    type: object
  dtos.UserUpdate:
    properties:
      email:
        type: string
      first_name:
        type: string
      image:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    required:
    - email
    type: object
  entity.Categories:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - name
    type: object
  entity.Suppliers:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  model.Order:
    properties:
      category_id:
        type: integer
      color:
        type: string
      content:
        type: string
      currency_code:
        type: string
      inventory_image:
        type: string
      name:
        type: string
      quantity:
        type: integer
      time:
        type: string
      total_amount:
        type: number
      user_id:
        type: integer
      uuid:
        type: string
    type: object
  model.Users:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      image:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - id
    - image
    - last_name
    - phone_number
    - role
    - username
    type: object
  xdto.CreateOrderDTO:
    properties:
      client_order_code:
        maxLength: 50
        type: string
      cod_amount:
        maximum: 50000000
        type: integer
      content:
        maxLength: 2000
        type: string
      coupon:
        type: string
      from_address:
        maxLength: 1024
        type: string
      from_district_name:
        type: string
      from_name:
        maxLength: 1024
        type: string
      from_phone:
        type: string
      from_province_name:
        type: string
      from_ward_name:
        type: string
      height:
        maximum: 200
        type: integer
      insurance_value:
        maximum: 5000000
        type: integer
      items:
        items:
          $ref: '#/definitions/xdto.OrderItem'
        type: array
      length:
        maximum: 200
        type: integer
      note:
        maxLength: 5000
        type: string
      payment_type_id:
        type: integer
      pick_shift:
        type: string
      pick_station_id:
        type: integer
      required_note:
        enum:
        - CHOTHUHANG
        - CHOXEMHANGKHONGTHU
        - KHONGCHOXEMHANG
        type: string
      return_address:
        maxLength: 1024
        type: string
      return_district_id:
        type: integer
      return_phone:
        type: string
      return_ward_code:
        type: string
      service_type_id:
        type: integer
      shop_id:
        type: integer
      to_address:
        maxLength: 1024
        type: string
      to_district_id:
        type: integer
      to_name:
        maxLength: 1024
        type: string
      to_phone:
        type: string
      to_ward_code:
        type: string
      token:
        type: string
      weight:
        maximum: 50000
        type: integer
      width:
        maximum: 200
        type: integer
    required:
    - from_address
    - from_district_name
    - from_name
    - from_phone
    - from_province_name
    - from_ward_name
    - height
    - items
    - length
    - payment_type_id
    - required_note
    - service_type_id
    - shop_id
    - to_address
    - to_district_id
    - to_name
    - to_phone
    - to_ward_code
    - token
    - weight
    - width
    type: object
  xdto.Data:
    properties:
      district_encode:
        type: string
      expected_delivery_time:
        type: string
      fee:
        $ref: '#/definitions/xdto.Fee'
      order_code:
        type: string
      sort_code:
        type: string
      total_fee:
        type: string
      trans_type:
        type: string
      ward_encode:
        type: string
    type: object
  xdto.District:
    properties:
      Code:
        type: string
      DistrictID:
        type: integer
      DistrictName:
        type: string
      ProvinceID:
        type: integer
      SupportType:
        type: integer
      Type:
        type: integer
    type: object
  xdto.DistrictDTO:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/xdto.District'
        type: array
      message:
        type: string
    type: object
  xdto.Fee:
    properties:
      coupon:
        type: integer
      insurance:
        type: integer
      main_service:
        type: integer
      r2s:
        type: integer
      return:
        type: integer
      station_do:
        type: integer
      station_pu:
        type: integer
    type: object
  xdto.Log:
    properties:
      status:
        type: string
      updated_date:
        type: string
    type: object
  xdto.OrderDTO:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/xdto.Data'
      message:
        type: string
    type: object
  xdto.OrderInfo:
    properties:
      _id:
        type: string
      client_id:
        type: integer
      client_order_code:
        type: string
      cod_amount:
        type: integer
      cod_collect_date:
        type: string
      cod_failed_amount:
        type: integer
      cod_failed_collect_date:
        type: string
      cod_transfer_date:
        type: string
      content:
        type: string
      converted_weight:
        type: integer
      coupon:
        type: string
      created_client:
        type: integer
      created_date:
        type: string
      created_employee:
        type: integer
      created_ip:
        type: string
      created_source:
        type: string
      current_warehouse_id:
        type: integer
      custom_service_fee:
        type: integer
      deliver_station_id:
        type: integer
      deliver_warehouse_id:
        type: integer
      employee_note:
        type: string
      finish_date:
        type: string
      from_address:
        type: string
      from_district_id:
        type: integer
      from_name:
        type: string
      from_phone:
        type: string
      from_ward_code:
        type: string
      height:
        type: integer
      insurance_value:
        type: integer
      is_cod_collected:
        type: boolean
      is_cod_transferred:
        type: boolean
      leadtime:
        type: string
      length:
        type: integer
      log:
        items:
          $ref: '#/definitions/xdto.Log'
        type: array
      next_warehouse_id:
        type: integer
      note:
        type: string
      order_code:
        type: string
      order_date:
        type: string
      order_value:
        type: integer
      payment_type_id:
        type: integer
      pick_station_id:
        type: integer
      pick_warehouse_id:
        type: integer
      required_note:
        type: string
      return_address:
        type: string
      return_district_id:
        type: integer
      return_name:
        type: string
      return_phone:
        type: string
      return_ward_code:
        type: string
      return_warehouse_id:
        type: integer
      service_id:
        type: integer
      service_type_id:
        type: integer
      shop_id:
        type: integer
      soc_id:
        type: string
      status:
        type: string
      tag:
        items:
          type: string
        type: array
      to_address:
        type: string
      to_district_id:
        type: integer
      to_name:
        type: string
      to_phone:
        type: string
      to_ward_code:
        type: string
      updated_client:
        type: integer
      updated_date:
        type: string
      updated_employee:
        type: integer
      updated_ip:
        type: string
      updated_source:
        type: string
      updated_warehouse:
        type: integer
      version_no:
        type: string
      weight:
        type: integer
      width:
        type: integer
    type: object
  xdto.OrderInfoDTO:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/xdto.OrderInfo'
        type: array
      message:
        type: string
    type: object
  xdto.OrderItem:
    properties:
      category:
        type: string
      code:
        type: string
      height:
        type: integer
      length:
        type: integer
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
      weight:
        type: integer
      width:
        type: integer
    required:
    - name
    - quantity
    - weight
    type: object
  xdto.Province:
    properties:
      Code:
        type: string
      ProvinceID:
        type: integer
      ProvinceName:
        type: string
    type: object
  xdto.ProvinceDTO:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/xdto.Province'
        type: array
      message:
        type: string
    type: object
  xdto.Ward:
    properties:
      DistrictID:
        type: integer
      WardCode:
        type: string
      WardName:
        type: string
    type: object
  xdto.WardDTO:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/xdto.Ward'
        type: array
      message:
        type: string
    type: object
info:
  contact: {}
  description: This is a documentation for the Swipe API
  title: Swipe Public API v0.0.1
  version: 0.0.1
paths:
  /address:
    get:
      consumes:
      - application/json
      description: get address delivery.
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.Address'
            type: array
      tags:
      - address
    post:
      consumes:
      - application/json
      description: create address delivery.
      parameters:
      - description: address request
        in: body
        name: addr
        required: true
        schema:
          $ref: '#/definitions/dtos.DeliveryAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ProductResponse'
            type: array
      tags:
      - address
  /address/district:
    get:
      consumes:
      - application/json
      description: get district by province ID.
      parameters:
      - description: province id
        in: query
        name: province_id
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/xdto.DistrictDTO'
      tags:
      - address
  /address/province:
    get:
      consumes:
      - application/json
      description: get province
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/xdto.ProvinceDTO'
      tags:
      - address
  /address/ward:
    get:
      consumes:
      - application/json
      description: get ward by district ID.
      parameters:
      - description: district id
        in: query
        name: district_id
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/xdto.WardDTO'
      tags:
      - address
  /auth/email:
    get:
      consumes:
      - application/json
      description: check email address before login
      parameters:
      - description: email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - manager
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login account.
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LoginResponse'
      tags:
      - manager
  /auth/logout:
    get:
      consumes:
      - application/json
      description: logout user from the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - manager
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register account for admin.
      parameters:
      - description: Sign Up
        in: body
        name: sign_up
        required: true
        schema:
          $ref: '#/definitions/dtos.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignUpResponse'
      tags:
      - manager
  /categories:
    get:
      consumes:
      - application/json
      description: get categories
      parameters:
      - description: limit number
        in: query
        name: limit
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Slices-entity_Categories'
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: insert new category
      parameters:
      - description: Categories Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/entity.Categories'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: delete category by ID
      parameters:
      - description: category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: update category information
      parameters:
      - description: category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category Request
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateCategories'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - categories
  /collections:
    get:
      consumes:
      - application/json
      description: get collections
      parameters:
      - description: position of collections
        in: query
        name: position
        required: true
        type: string
      - description: limit of cards carousel
        in: query
        name: limit
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Article'
      tags:
      - collections
    post:
      consumes:
      - application/json
      description: create collections
      parameters:
      - description: collections Request
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/dtos.UploadArticle'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Message'
      tags:
      - collections
  /collections/img:
    put:
      consumes:
      - application/json
      description: update collections image
      parameters:
      - description: image of collections
        in: formData
        name: img
        required: true
        type: file
      - description: collections identifier
        in: formData
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - collections
  /collections/message:
    get:
      consumes:
      - application/json
      description: get list of headline banner
      parameters:
      - description: position of collections
        in: query
        name: position
        required: true
        type: string
      - description: limit headline of collections
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Message'
      tags:
      - collections
    post:
      consumes:
      - application/json
      description: create headline banner into collections
      parameters:
      - description: headline banner data request
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/dtos.Message'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - collections
  /comment:
    get:
      consumes:
      - application/json
      description: get all comments of product
      parameters:
      - description: id of products
        in: query
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Comment'
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: create comment into products
      parameters:
      - description: comment data request
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/dtos.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - collections
  /delivery:
    get:
      consumes:
      - application/json
      description: get delivery info by user id.
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - delivery
    post:
      consumes:
      - application/json
      description: create delivery info.
      parameters:
      - description: delivery info request
        in: body
        name: addr
        required: true
        schema:
          $ref: '#/definitions/dtos.DeliveryBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - delivery
  /delivery/order:
    post:
      consumes:
      - application/json
      description: create order delivery.
      parameters:
      - description: order delivery body request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/xdto.CreateOrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/xdto.OrderDTO'
      tags:
      - delivery
  /delivery/order/{code}:
    get:
      consumes:
      - application/json
      description: get delivery order details by order code.
      parameters:
      - description: delivery order code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/xdto.OrderInfoDTO'
      tags:
      - delivery
  /healthcheck:
    get:
      consumes:
      - application/json
      description: health check api server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - base
  /inventories:
    delete:
      consumes:
      - application/json
      description: delete inventory by id
      parameters:
      - description: inventory id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - inventories
    get:
      consumes:
      - application/json
      description: get all product from inventory
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.InvStock-dtos_InvStorage'
      tags:
      - inventories
    put:
      consumes:
      - application/json
      description: update inventory
      parameters:
      - description: Inventory Request
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/dtos.InvUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - inventories
  /inventories/{type}:
    post:
      consumes:
      - application/json
      description: add product to inventories
      parameters:
      - description: Specification type (storage or wireless)
        in: path
        name: type
        required: true
        type: string
      - description: Inventories Request
        in: body
        name: InvDetail
        required: true
        schema:
          $ref: '#/definitions/dtos.InvDetail-dtos_Object'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - inventories
  /inventories/details:
    get:
      consumes:
      - application/json
      description: get product availability in inventories
      parameters:
      - description: inventory id
        in: query
        name: id
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Inventory-dtos_InvStorage'
      tags:
      - inventories
  /inventories/image:
    put:
      consumes:
      - application/json
      description: update inventory image
      parameters:
      - description: stock image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - inventories
  /inventories/specs/{type}:
    post:
      consumes:
      - application/json
      description: create new specification for inventory
      parameters:
      - description: Specification type (storage or wireless)
        in: path
        name: type
        required: true
        type: string
      - description: Storage Specification
        in: body
        name: spec
        required: true
        schema:
          $ref: '#/definitions/dtos.Object'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.OK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.Error'
      tags:
      - inventories
  /oauth2/login:
    get:
      consumes:
      - application/json
      description: Auth0 Login form.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - base
  /products:
    delete:
      consumes:
      - application/json
      description: delete product by id
      parameters:
      - description: product id
        in: query
        name: pid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get product information
      parameters:
      - description: limit number of products
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Slices-dtos_ProductResponse'
      tags:
      - products
    post:
      consumes:
      - application/json
      description: create new product
      parameters:
      - description: Product Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CreateProduct'
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update product information
      parameters:
      - description: Product Information Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateProductInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - products
  /products/{type}:
    get:
      consumes:
      - application/json
      description: get product view
      parameters:
      - description: product type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ProductView'
            type: array
      tags:
      - products
  /products/accessory:
    get:
      consumes:
      - application/json
      description: get accessory detail
      parameters:
      - description: id of product
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AccessoryDetail'
      tags:
      - products
  /products/details:
    get:
      consumes:
      - application/json
      description: get product details
      parameters:
      - description: product id
        in: query
        name: id
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ProductDetail-dtos_DetailStorage'
      tags:
      - products
  /products/img:
    post:
      consumes:
      - multipart/form-data
      description: insert new product image
      parameters:
      - description: id of product
        in: query
        name: id
        required: true
        type: string
      - description: image of product
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Error'
      tags:
      - products
  /purchase/carts:
    delete:
      consumes:
      - application/json
      description: delete item from carts
      parameters:
      - description: cart id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - purchase
    get:
      consumes:
      - application/json
      description: get list of items from carts
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CartSlices'
      tags:
      - purchase
    post:
      consumes:
      - application/json
      description: add item to carts.
      parameters:
      - description: cart insert request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.CartDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - purchase
  /purchase/orders:
    get:
      consumes:
      - application/json
      description: get list of orders.
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: string
      - description: limit order
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.OrderSchema'
            type: array
      tags:
      - purchase
    post:
      consumes:
      - application/json
      description: create order.
      parameters:
      - description: order insert request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.OrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - purchase
  /search:
    get:
      consumes:
      - application/json
      description: get product
      parameters:
      - description: keyword
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ProductResponse'
            type: array
      tags:
      - search
  /suppliers:
    get:
      consumes:
      - application/json
      description: get suppliers information
      parameters:
      - description: limit number of suppliers
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Slices-entity_Suppliers'
      tags:
      - suppliers
    post:
      consumes:
      - application/json
      description: insert new suppliers information
      parameters:
      - description: Suppliers Request
        in: body
        name: Supplier
        required: true
        schema:
          $ref: '#/definitions/dtos.Supplier'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - suppliers
  /users:
    get:
      consumes:
      - application/json
      description: get information for users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Users'
      tags:
      - manager
    put:
      consumes:
      - application/json
      description: update information for users.
      parameters:
      - description: Update Users
        in: body
        name: UserSchema
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - manager
  /users/image:
    put:
      consumes:
      - application/json
      description: update information for users.
      parameters:
      - description: image of collections
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OK'
      tags:
      - manager
  /worker:
    get:
      consumes:
      - application/json
      description: health check worker consume server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - base
swagger: "2.0"
